
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  name            String
  password        String
  role            UserRole          @default(CLIENT)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  appointments    Appointment[]
  messages        Message[]         @relation("UserMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
  services        ServiceProvider?
}

model ServiceProvider {
  id              String            @id @default(uuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization  String
  bio             String            @db.Text
  appointments    Appointment[]
  services        Service[]
}

model Service {
  id              String            @id @default(uuid())
  title           String
  description     String            @db.Text
  image           String
  providerId      String
  provider        ServiceProvider   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  appointments    Appointment[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Appointment {
  id              String            @id @default(uuid())
  date            DateTime
  status          AppointmentStatus @default(SCHEDULED)
  appointmentType AppointmentType
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId       String
  service         Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  providerId      String
  provider        ServiceProvider   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  messages        Message[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Message {
  id              String            @id @default(uuid())
  content         String            @db.Text
  senderId        String
  sender          User              @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId     String
  recipient       User              @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  appointmentId   String?
  appointment     Appointment?      @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  createdAt       DateTime          @default(now())
  read            Boolean           @default(false)
}

model Call {
  id              String            @id @default(uuid())
  callType        CallType
  startTime       DateTime
  endTime         DateTime?
  participants    CallParticipant[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model CallParticipant {
  id              String            @id @default(uuid())
  userId          String
  callId          String
  call            Call              @relation(fields: [callId], references: [id], onDelete: Cascade)
  joinedAt        DateTime          @default(now())
  leftAt          DateTime?
  @@unique([userId, callId])
}

enum UserRole {
  ADMIN
  PROVIDER
  CLIENT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  VIDEO_CALL
  VOICE_CALL
  IN_PERSON
}

enum CallType {
  VIDEO
  VOICE
}
